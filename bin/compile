#!/bin/bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Heroku-provided params
BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"
BP_DIR=`cd $(dirname $0); cd ..; pwd`

METABASE_VER=${METABASE_VER:-0.46.2}
CLEAR_CACHE=${CLEAR_CACHE:-0}

set -e            # fail fast
set -o pipefail   # do not ignore exit codes when piping output

indent() {
  sed -u 's/^/       /'
}

echo "-----> Metabase buildpack"

export_env_dir() {
  local env_dir=${1:-$ENV_DIR}
  local allowlist_regex=${2:-''}
  local blocklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|BUILDPACK_URL)$'}

  if [ -d "$env_dir" ]; then
    echo "-----> Exporting config vars"
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$allowlist_regex" | grep -qvE "$blocklist_regex" &&
        echo "       $e" &&
        export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir

if [[ $CLEAR_CACHE -eq 1 ]] ; then
  echo "-----> Clearing the buildpack cache"
  rm -fr $CACHE_DIR/
fi

############# Metabase binary ################################

BIN="metabase.jar"

RELEASE_VER="v${METABASE_VER}"

FILE_SUFFIX="linux-static-x64"

if [ ! -e $CACHE_DIR/$BIN ]; then
  BIN_URL="https://downloads.metabase.com/v${METABASE_VER}/metabase.jar"
  if curl --output /dev/null --silent --head --fail $BIN_URL; then
    echo "-----> Downloading and caching Metabase $METABASE_VER binary"
    mkdir -p $CACHE_DIR
    curl -# -L $BIN_URL > $CACHE_DIR/metabase.jar
  else
    echo "-----> Could not find prebuilt ${BIN_URL}"
    exit 1
  fi
fi

echo "-----> Restoring cached $BIN"
cp -R $CACHE_DIR/$BIN $BUILD_DIR
